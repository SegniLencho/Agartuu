import { ApplicationRef, ComponentFactoryResolver, Injector, NgZone } from "@angular/core";
import { Observable } from "rxjs";
import { ToastrOptions } from "./toastr.options";
import { Toastr } from "./toastr";
import * as ɵngcc0 from '@angular/core';
export interface IImplicitContext<T> {
    $implicit?: T;
}
export declare class ToastrManager {
    private _applicationRef;
    private _componentFactoryResolver;
    private _injector;
    private ngZone;
    private options;
    toastrContainers: Array<any>;
    private index;
    private toastClicked;
    constructor(_applicationRef: ApplicationRef, _componentFactoryResolver: ComponentFactoryResolver, _injector: Injector, ngZone: NgZone, options: ToastrOptions);
    private createToastrComponent<T>(type, providers?);
    private attachToApplication<T>(componentRef);
    private detachFromApplication<T>(componentRef);
    private isToastrContainerExist(position);
    private getToastrComponentRef(position);
    createTimeout(toast: Toastr): any;
    setupToast(toast: Toastr, options?: any): Toastr;
    private clearToast(toast);
    private clearAllToasts();
    private dispose(toastrComponentRef);
    private _onToastClicked(toast);
    dismissToastr(toast: Toastr): void;
    dismissAllToastr(): void;
    onClickToast(): Observable<Toastr>;
    showToastr(toastr: Toastr, options?: Object): Promise<Toastr>;
    errorToastr(message: string, title?: string, options?: any): Toastr;
    infoToastr(message: string, title?: string, options?: any): Toastr;
    successToastr(message: string, title?: string, options?: any): Toastr;
    warningToastr(message: string, title?: string, options?: any): Toastr;
    customToastr(message: string, title?: string, options?: any): Toastr;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastrManager>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ToastrManager>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3RyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsidG9hc3RyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciwgTmdab25lIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IFRvYXN0ck9wdGlvbnMgfSBmcm9tIFwiLi90b2FzdHIub3B0aW9uc1wiO1xyXG5pbXBvcnQgeyBUb2FzdHIgfSBmcm9tIFwiLi90b2FzdHJcIjtcclxuZXhwb3J0IGludGVyZmFjZSBJSW1wbGljaXRDb250ZXh0PFQ+IHtcclxuICAgICRpbXBsaWNpdD86IFQ7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9hc3RyTWFuYWdlciB7XHJcbiAgICBwcml2YXRlIF9hcHBsaWNhdGlvblJlZjtcclxuICAgIHByaXZhdGUgX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcclxuICAgIHByaXZhdGUgX2luamVjdG9yO1xyXG4gICAgcHJpdmF0ZSBuZ1pvbmU7XHJcbiAgICBwcml2YXRlIG9wdGlvbnM7XHJcbiAgICB0b2FzdHJDb250YWluZXJzOiBBcnJheTxhbnk+O1xyXG4gICAgcHJpdmF0ZSBpbmRleDtcclxuICAgIHByaXZhdGUgdG9hc3RDbGlja2VkO1xyXG4gICAgY29uc3RydWN0b3IoX2FwcGxpY2F0aW9uUmVmOiBBcHBsaWNhdGlvblJlZiwgX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBfaW5qZWN0b3I6IEluamVjdG9yLCBuZ1pvbmU6IE5nWm9uZSwgb3B0aW9uczogVG9hc3RyT3B0aW9ucyk7XHJcbiAgICBwcml2YXRlIGNyZWF0ZVRvYXN0ckNvbXBvbmVudDxUPih0eXBlLCBwcm92aWRlcnM/KTtcclxuICAgIHByaXZhdGUgYXR0YWNoVG9BcHBsaWNhdGlvbjxUPihjb21wb25lbnRSZWYpO1xyXG4gICAgcHJpdmF0ZSBkZXRhY2hGcm9tQXBwbGljYXRpb248VD4oY29tcG9uZW50UmVmKTtcclxuICAgIHByaXZhdGUgaXNUb2FzdHJDb250YWluZXJFeGlzdChwb3NpdGlvbik7XHJcbiAgICBwcml2YXRlIGdldFRvYXN0ckNvbXBvbmVudFJlZihwb3NpdGlvbik7XHJcbiAgICBjcmVhdGVUaW1lb3V0KHRvYXN0OiBUb2FzdHIpOiBhbnk7XHJcbiAgICBzZXR1cFRvYXN0KHRvYXN0OiBUb2FzdHIsIG9wdGlvbnM/OiBhbnkpOiBUb2FzdHI7XHJcbiAgICBwcml2YXRlIGNsZWFyVG9hc3QodG9hc3QpO1xyXG4gICAgcHJpdmF0ZSBjbGVhckFsbFRvYXN0cygpO1xyXG4gICAgcHJpdmF0ZSBkaXNwb3NlKHRvYXN0ckNvbXBvbmVudFJlZik7XHJcbiAgICBwcml2YXRlIF9vblRvYXN0Q2xpY2tlZCh0b2FzdCk7XHJcbiAgICBkaXNtaXNzVG9hc3RyKHRvYXN0OiBUb2FzdHIpOiB2b2lkO1xyXG4gICAgZGlzbWlzc0FsbFRvYXN0cigpOiB2b2lkO1xyXG4gICAgb25DbGlja1RvYXN0KCk6IE9ic2VydmFibGU8VG9hc3RyPjtcclxuICAgIHNob3dUb2FzdHIodG9hc3RyOiBUb2FzdHIsIG9wdGlvbnM/OiBPYmplY3QpOiBQcm9taXNlPFRvYXN0cj47XHJcbiAgICBlcnJvclRvYXN0cihtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBvcHRpb25zPzogYW55KTogVG9hc3RyO1xyXG4gICAgaW5mb1RvYXN0cihtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBvcHRpb25zPzogYW55KTogVG9hc3RyO1xyXG4gICAgc3VjY2Vzc1RvYXN0cihtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBvcHRpb25zPzogYW55KTogVG9hc3RyO1xyXG4gICAgd2FybmluZ1RvYXN0cihtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBvcHRpb25zPzogYW55KTogVG9hc3RyO1xyXG4gICAgY3VzdG9tVG9hc3RyKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiBUb2FzdHI7XHJcbn1cclxuIl19